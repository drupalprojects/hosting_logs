<?php

/**
 * @file
 * Hosting logs module code
 */

/**
 * Implements hook_permission().
 */
function hosting_logs_permission() {
  return array(
    'access hosting logs' => array(
      'title' => t('access hosting logs'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function hosting_logs_menu() {

  $items['node/%node/errors'] = array(
    'title' => 'Error Logs',
    'description' => 'View error logs for this site.',
    'page callback' => 'hosting_logs_page_error',
    'page arguments' => array(1),
    'access callback' => 'hosting_logs_error_menu_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/errors/view'] = array(
    'title' => 'Error Logs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  // @TODO: Removed until it really works
  //  $items['node/%node/errors/dblog'] = array(
  //    'title' => 'Watchdog',
  //    'description' => 'View watchdog logs for this site.',
  //    'page callback' => 'hosting_logs_page_dblog',
  //    'page arguments' => array(1),
  //    'type' => MENU_LOCAL_TASK,
  //    'access callback' => 'hosting_logs_menu_access',
  //    'access arguments' => array(1),
  //  );
  return $items;
}

/**
 * The access callback for the Logs - Default tab.
 *
 * Make sure user has perms to view and and also consider the node type.
 */
function hosting_logs_default_menu_access($node) {
  if (!user_access('access hosting logs')) {
    return FALSE;
  }

  // Nothing to show until verified.
  if (!isset($node->verified) || $node->verified == 0) {
    return FALSE;
  }

  // Only show on platforms if the hosting_logs_git sub-module is enabled.
  if ($node->type == 'platform') {
    if (module_exists('hosting_logs_git')) {
      return hosting_logs_git_menu_access($node);
    }
    else {
      return FALSE;
    }
  }

  if (hosting_logs_error_menu_access($node)) {
    return TRUE;
  }
  else {
    return hosting_logs_dblog_menu_access($node);
  }
}

/**
 * The access callback for the Logs - Error log tab.
 *
 * Make sure user has perms to view and and also that the node we are
 * viewing is a site node.
 */
function hosting_logs_error_menu_access($node) {
  $result = db_query('SELECT * FROM {hosting_logs} WHERE site_nid = :nid', array(
    ':nid' => $node->nid
  ));

  $logs = $result->fetch();
  if (!user_access('access hosting logs')) {
    return FALSE;
  }

  // Only allow for site nodes with logs_enabled.
  if (is_object($node) && $node->type == 'site' && $logs->logs_enabled) {
    return TRUE;
  }
}

/**
 * The access callback for the Logs - Watchdog tab.
 *
 * Make sure user has perms to view and and also that the node we are
 * viewing is a site node.
 */
function hosting_logs_dblog_menu_access($node) {
  if (!user_access('access hosting logs')) {
    return FALSE;
  }

  // Only allow for site nodes.
  if (!$node || ($node->type != 'site')) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Page callback for default node/42/logs.
 */
function hosting_logs_page_default($node) {
  if ($node->type == 'platform') {
    return hosting_logs_git_page($node);
  }
  elseif ($node->logs_enabled) {
    return hosting_logs_page_error($node);
  }
  else {
    return hosting_logs_page_dblog($node);
  }
}

/**
 * Page callback for error log.
 */
function hosting_logs_page_error($node) {
  $uri = $node->title;

  $log_file_path = variable_get('provision_logs_file_path', '/var/log/aegir');
  $log_url_path = variable_get('provision_logs_url_path', 'error.log');

  $path_to_log = "$log_file_path/$uri.error.log";

  $output = @file_get_contents($path_to_log);

  if (empty($output) && file_exists($path_to_log)) {
    $output = t('The log file is empty.');
  }
  elseif (empty($output)) {
    $output = t('Cannot access log file at %path. Did you verify this site after installing the hosting_logs module?', array('%path' => $path_to_log));
  }
  else {
    $rows = array();
    $lines = array_filter(array_reverse(explode("\n", $output)));
    foreach ($lines as $line) {
      $rows[] = array(
         check_markup($line, 'plain_text'),
      );
    }

    $headers = array();  
    $output = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('class' => array('table errors-table'))));
  }
  return $output;
}

/**
 * Page callback for dblog.
 */
function hosting_logs_page_dblog($node) {

  $db_node = node_load($node->db_server);
  $connection_data = $db_node->services['db'];

  $host = reset($db_node->ip_addresses);
  $dsn = sprintf("%s:host=%s", $connection_data->type, $host);
  if ($connection_data->has_port) {
    $dsn = "{$dsn};port={$connection_data->port}";
  }
  if (empty($node->db_name)) {
    return t("Please verify this site first to prepare some settings");
  }

  if (!hosting_logs_database_exists($node->db_name, $dsn, $connection_data->db_user, $connection_data->db_passwd)) {
    return t('Site database unavailable. You could try a verify task on the site.');
  }

  global $databases;

  // Inject target site.
  $target_db = array(
    'driver' => 'mysql',
    'database' => $node->db_name,
    'username' => $connection_data->db_user,
    'password' => $connection_data->db_passwd,
    'host' => $host,
  );

  Database::addConnectionInfo('target_site', 'default', $target_db);
  db_set_active('target_site');

  // Check for enabled database log module.
  if (db_query("SELECT status FROM {system} WHERE name = :name", array(':name' => 'dblog'))->fetchField()) {
    $header = array();
    $data = array();
    $result = db_query("DESCRIBE {watchdog}");

    foreach ($result as $item) {
      $header[] = $item->Field;
    }

    $query = db_select('watchdog', 'w')
      ->extend('PagerDefault')
      ->limit(100)
      ->fields('w')
      ->orderBy('w.wid', 'DESC');

    $result = $query->execute();

    foreach ($result as $row) {
      $item = (array) $row;
      $item['variables'] = print_r(unserialize($item['variables']), 1);

      // Remove domain location.
      $item['location'] = str_replace('http://' . $node->title, '', $item['location']);
      $data[] = $item;
    }

    db_set_active('default');

    $message = theme('table', array('header' => $header, 'rows' => $data));
    $message .= theme('pager');
  }
  else {
    db_set_active('default');

    $message = t('The dblog module is not enabled in this site.');
  }

  return $message;
}


/**
 * Check if one database exists.
 */
function hosting_logs_database_exists($name, $dsn, $user, $pass) {
  $dsn = $dsn . ';dbname=' . $name;
  try {
    // Try to connect to the DB to test if it exists.
    $conn = new PDO($dsn, $user, $pass);
    // Free the $conn memory.
    $conn = NULL;
    return TRUE;
  }
  catch (PDOException $e) {
    return FALSE;
  }
}

/**
 * Allows a site to turn it's error logs on and off.
 *
 * Implements hook_form_alter() for site-node-form
 */
function hosting_logs_form_site_node_form_alter(&$form) {
  $node = $form['#node'];
  _hosting_logs_node_load_defaults($node);

  $form['logs_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save server errors to !path/!name',
      array(
        '!path' => variable_get('provision_logs_file_path', '/var/log/aegir'),
        '!name' => $node->title)
    ),
    '#default_value' => $node->logs_enabled,
  );
  $form['logs_available'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make error logs available at !link', array('!link' => hosting_logs_errors_link($node))),
    '#default_value' => $node->logs_available,
  );
  $form['logs_visible'] = array(
    '#type' => 'checkbox',
    '#title' => t('Output errors directly to the page. <em>WARNING: This outputs PHP errors directly to requested pages instead of serving up HTTP 500 response. Use with caution. </em>'),
    '#default_value' => $node->logs_visible,
  );
  return $form;
}

/**
 * Implements hook_node_load().
 */
function hosting_logs_node_load($nodes, $types) {

  // Only operate on sites.
  if (!in_array('site', $types)) {
    return;
  }

  // Load all hosting_logs data where site_nid is in our nodes to load.
  $result = db_query('SELECT * FROM {hosting_logs} WHERE site_nid IN(:nids)', array(
    ':nids' => array_keys($nodes)
  ));

  foreach ($result as $record) {
    $nodes[$record->site_nid]->logs_enabled = $record->logs_enabled;
    $nodes[$record->site_nid]->logs_available = $record->logs_available;
    $nodes[$record->site_nid]->logs_visible = $record->logs_visible;
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_logs_node_insert($node) {
  if ($node->type == 'site') {
    $fields = array(
      'logs_enabled' => $node->logs_enabled,
      'logs_available' => $node->logs_available,
      'logs_visible' => $node->logs_visible,
      'site_nid' => $node->nid,
    );
    drupal_write_record('hosting_logs', $fields, 'site_nid');
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_logs_node_update($node) {
  if ($node->type == 'site') {
    _hosting_logs_node_load_defaults($node);

    db_merge('hosting_logs')
      ->key(array('site_nid' => $node->nid))
      ->fields(array(
        'logs_enabled' => (int) $node->logs_enabled,
        'logs_available' => (int) $node->logs_available,
        'logs_visible' => (int) $node->logs_visible,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function hosting_logs_node_delete($node) {
  if ($node->type == 'site') {
    db_delete('hosting_logs')
      ->condition('site_nid', $node->nid)
      ->execute();

  }
}

/**
 * Private function to initialize default values for a node object.
 */
function _hosting_logs_node_load_defaults(&$node) {
  if (!isset($node->logs_enabled)) {
    $node->logs_enabled = FALSE;
  }

  if (!isset($node->logs_available)) {
    $node->logs_available = FALSE;
  }

  if (!isset($node->logs_visible)) {
    $node->logs_visible = FALSE;
  }
}

/**
 * Helper to get the link to the error logs.
 */
function hosting_logs_errors_link($node, $return = 'html') {
  if (!empty($node->nid)) {
    $link = _hosting_site_url($node);
  }
  else {
    $link = "http://www.example.com";
  }

  $link .= '/error.log';
  if ($return == 'html') {
    return l($link, $link, array());
  }
  elseif ($return = 'url') {
    return $link;
  }
}
